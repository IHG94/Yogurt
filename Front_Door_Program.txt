### Program for the front door which unlocks if the PIR senses presence and locks ten seconds after
there is also a keycard reader to unlock it from outside ###
### Program shows the use of a timer counting down ###


# ACTOR BEHAVIOUR DEFINITIONS
# define PIR behaviour
actor PIR():
	config: 
		# connection to framework in which the model has been implemented
	states:
		present: /active
		brightness: /luminosity
	actions:
		self


# define Keycard reader
actor card_reader():
	config:
		# connection to framework in whcih the model has been implemented
	states:
		locked: /locked
	actions:
		self/defualt	
		
# define front door
actor front_door(card_reader, PIR):
	config:
		# connection to framework in which the model has been implemented
	states:
		locked: /locked
	actions:
		on(PIR.present):
			when(PIR.present = True):
				locked <- False
			when(PIR.present = False):
				time.timer(00:00:10.00):
					locked <- True
		on(card_reader.locked):
			when(card_reader.locked = False):
				locked <- False
		
		
# ACTOR INITIATION				Note: the device instances are specified as they appear in the database of the current version of Igor
mainDoor = front_door(//data/devices/door[IP='192.168.37.53'])
entrancePIR = PIR(//data/sensors/PIR[uuid='d06a66e10b6d4a1285143080c88b029c'])
frontKey = card_reader(//data/sensors/PIR[uuid='d06a66e10b6d4a1285143080c88b029c'])


# ACTOR CONNECTIONS
mainDoor.input(card_reader = frontKey, PIR = entrancePIR)